classType components.driverTemplate
blockdiagramSpecification Main {
	methodBody power {
		outPin active {
			connection_1
		}
	}
	subtraction at (321, 246) {
		inPin connection_16 {
			bendpoints (100, 0)
		}
		inPin connection_17
		outPin {
			connection_2
		}
	}
	literal Numeric "0.0" at (681, 383) size (49, 0) {
		label at (0, 4)
		outPin {
			connection_22
		}
	}
	literal Numeric "0.0" at (601, 303) size (49, 0) {
		label at (0, 4)
		outPin {
			connection_5
		}
	}
	greaterOrEqual at (671, 286) {
		inPin connection_12 {
			bendpoints (50, 0)
		}
		inPin connection_5
		outPin {
			connection_7
		}
	}
	multiplication at (501, 216) {
		inPin connection_13 {
			bendpoints (0, 60)
		}
		inPin connection_2 {
			bendpoints (140, 0)
		}
		outPin {
			connection_8
		}
	}
	unitConversion at (581, 221) {
		inPin connection_8
		outPin {
			connection_20, connection_12
		}
		inputType units.common.kmph outputType real
	}
	literal Numeric "2000" at (371, 153) size (49, 0) {
		label at (0, 4)
		outPin {
			connection_13
		}
	}
	ifElse at (721, 291) {
		inPin connection_7
		ifControlFlowOutPin {
			connection_18
		}
		elseControlFlowOutPin {
			connection_21
		}
		sequenceCall {
			inPin connection_1
		}
	}
	methodArgumentIdentifier power.vSoll at (181, 235) {
		label at (0, -1)
		outPin {
			connection_16
		}
		sequenceCall {
			inPin
		}
	}
	methodArgumentIdentifier power.vIst at (181, 265) {
		label at (0, -1)
		outPin {
			connection_17
		}
		sequenceCall {
			inPin
		}
	}
	return at (701, 215) {
		label at (0, 0)
		inPin connection_20 {
			bendpoints (50, 0), (50, -10)
		}
		sequenceCall {
			inPin connection_18 {
				bendpoints (40, 0), (40, -130), (-100, -130), (-100, -100)
			}
		}
	}
	return at (761, 385) {
		label at (0, 0)
		inPin connection_22
		sequenceCall {
			inPin connection_21 {
				bendpoints (0, 40)
			}
		}
	}
}